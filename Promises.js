/* PROMISES--> to overcome the issue of callback hells.
Promise is for "eventual" completion of task*/

// resolve and reject are callbacks provided by JS

/*
3 STATES OF PROMISES
1- Pending --> no final result is received/ the result is undefined
2- Fulfilled --> final result is received/ the result is a value (fulfilled)
3- Rejected --> an error occured and result can't be generated/ the result is an error object
*/

// Generally, we do not create promises, they are generated by APIs, and we need to handle them
let promise = new Promise((resolve, reject)=>{
    console.log("Promise");
    resolve("Success"); // to fulfill promise
    // reject("Rejected"); //to generate error
});


//state will be pending for this even when the data is printed coz we haven't resolved it.
// let getData = (dataId, getNextData) => {
//     return new Promise((resolve, reject) => {
//     setTimeout(() => {
//         console.log("data", dataId);
//         if (getNextData) {
//         getNextData();
//         }
//     }, 5000);
// });
// };

let getData = (dataId, getNextData) => {
    return new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("data", dataId);
        resolve("Success");
        if (getNextData) {
        getNextData();
        }
    }, 5000);
});
};


// *************************************************************************** //
// HOW TO USE PROMISES
